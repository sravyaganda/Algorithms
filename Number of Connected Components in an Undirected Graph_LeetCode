class Solution {
    
    Map<Integer,Boolean> visited;
    Map<Integer,List<Integer>> adjList;
    int count;
    public int countComponents(int n, int[][] edges) {
        count=0;
        visited=new HashMap<Integer,Boolean>();
         adjList=new HashMap<Integer,List<Integer>>();
        count=0;
        
        for(int[] edge:edges)
        {
            if(!adjList.containsKey(edge[0]))
            {
                adjList.put(edge[0],new ArrayList<Integer>());
            }
            adjList.get(edge[0]).add(edge[1]);
              if(!adjList.containsKey(edge[1]))
            {
                adjList.put(edge[1],new ArrayList<Integer>());
            }
            adjList.get(edge[1]).add(edge[0]);
        }
        
        for(int i=0;i<n;i++)
        {
            visited.put(i,false);
        }
        
        for(int i=0;i<n;i++)
        {
            if(!visited.get(i))
            {
                dfs(i);
                count++;
            }
        }
        
        return count;
        
    }
    
    private void dfs(int vertex)
    {
        if(visited.get(vertex))
        {
            return;
        }
        
        visited.put(vertex,true);
        
        for(Integer adj:adjList.getOrDefault(vertex,new ArrayList<Integer>()))
        {
            if(!visited.get(adj))
            {
                dfs(adj);
            }
        }
        
    }
}
